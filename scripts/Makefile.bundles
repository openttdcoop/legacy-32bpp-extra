
$(DIR_NAME) : $(BUNDLE_FILES)
	$(_E) "[BUNDLE] $(BUNDLE_FILES)"
	$(_E) "[Generating:] $@/."
	$(_V)if [ -e $@ ]; then rm -rf $@; fi
	$(_E) "[mkdir:] $@"	
	$(_V)mkdir $@
	$(_E) "[mkdir:] $@/$(SPRITES_DIR)"
	$(_V)mkdir $@/$(SPRITES_DIR)
	$(_E) "[mkdir:] $@/$(SPRITES_DIR)/$(basename $(MAIN_TARGET))"	
	$(_V)mkdir $@/$(SPRITES_DIR)/$(basename $(MAIN_TARGET))
	$(_V)-for i in $(BUNDLE_FILES); do cp $$i $@; done
	$(_V)-for png in $(shell find $(SPRITES_DIR) -name "*.png"); do cp $$png $@/$(SPRITES_DIR)/$(basename $(MAIN_TARGET));done

bundle: $(DIR_NAME)

%.tar: $(DIR_NAME)
# Create the release bundle with all files in one tar
	$(_E) "[Generating:] $@"
	$(_V)$(TAR) $(TAR_FLAGS) $@ -C $(DIR_NAME)  $(MAIN_TARGET) $(SPRITES_DIR)
	$(_E)

bundle_tar: $(TAR_FILENAME)

bundle_zip: $(ZIP_FILENAME)
$(ZIP_FILENAME): $(TAR_FILENAME) $(DOC_FILES)
	$(_E) "[Generating:] $@"
	$(_E) "$(ZIP) $(ZIP_FLAGS) $@ $(TAR_FILENAME)"
	$(_V) $(ZIP) $(ZIP_FLAGS) $@ $(TAR_FILENAME) $(DOC_FILES)

bundle_bzip: $(BZIP_FILENAME)
$(BZIP_FILENAME): $(TAR_FILENAME)
	$(_E) "[Generating:] $@"
	$(_V)$(BZIP) $(BZIP_FLAGS) $^

# Installation process
install: $(TAR_FILENAME) $(INSTALL_DIR)
	$(_E) "[INSTALL] to $(INSTALL_DIR)"
	$(_V)-cp $(TAR_FILENAME) $(INSTALL_DIR)
	$(_E)

md5: $(MD5_FILENAME)

# OSX md5 programm generates slightly different output. Aleviate that by throwing some sed on all output:
$(MD5_FILENAME): $(TARGET_FILES)
	$(_E) "[MD5] $@"
	$(_V) $(MD5SUM) $(TARGET_FILES) | sed "s/  / /;s/ /  /" > $(MD5_FILENAME)

# OSX md5 programm generates slightly different output. Aleviate that by throwing some sed on all output:
check: $(TARGET_FILES) $(GRF_FILENAMES)
	$(_V) if [ -f $(MD5_FILENAME) ]; then echo "[CHECKING md5sums]"; else echo "Required file '$(MD5_FILENAME)' which to test against not found!"; false; fi
	$(_V) $(MD5SUM) $(TARGET_FILES) | sed "s/  / /;s/ /  /" > md5.check
	$(_V) if [ -z "`diff md5.check $(MD5_FILENAME)`" ]; then echo "No differences in md5sums"; else echo "Differences in md5sums:"; echo "`diff md5.check $(MD5_FILENAME)`"; false; fi

bundle_src:
	$(_E) "[Generating] $(DIR_NAME_SRC)"
	$(_V) rm -rf $(DIR_NAME_SRC)
	$(_E) mkdir -p $(DIR_NAME_SRC)	
	$(_V) mkdir -p $(DIR_NAME_SRC)
	$(_E) mkdir -p $(DIR_NAME_SRC)	$(addprefix $(DIR_NAME_SRC)/,$(shell for i in $(REPO_DIRS); do for j in $(MAIN_DIRS); do echo $$i | grep $$j; done; done))	
	$(_V) mkdir -p $(addprefix $(DIR_NAME_SRC)/,$(shell for i in $(REPO_DIRS); do for j in $(MAIN_DIRS); do echo $$i | grep $$j; done; done))
	$(_V) for k in `for i in $(REPO_FILES); do for j in $(MAIN_DIRS); do echo "$$i" | grep "$$j"; done; done;`; do cp -rf $$k $(addprefix $(DIR_NAME_SRC)/,$$k); done
	$(_V) for k in `for i in $(REPO_FILES); do echo "$$i" | grep -v "/"; done;`; do cp -rf $$k $(DIR_NAME_SRC); done
	$(_V) cp Makefile.local.sample $(DIR_NAME_SRC)/$(MAKEFILE_LOCAL)
	$(_V) echo 'REPO_REVISION = $(REPO_REVISION)' >> $(DIR_NAME_SRC)/$(MAKEFILE_LOCAL)
	$(_V) echo 'REPO_MODIFIED = $(REPO_MODIFIED)' >> $(DIR_NAME_SRC)/$(MAKEFILE_LOCAL)
	$(_V) echo 'REPO_TAGS    = $(REPO_TAGS)'    >> $(DIR_NAME_SRC)/$(MAKEFILE_LOCAL)
	$(_V) echo 'HG = :' >> $(DIR_NAME_SRC)/$(MAKEFILE_LOCAL)
	$(_V) $(TAR) $(TAR_FLAGS) $(DIR_NAME_SRC).tar.gz $(DIR_NAME_SRC)
	$(_V) rm -rf $(DIR_NAME_SRC)

$(INSTALL_DIR):
	$(_E) "Install dir didn't exist. Creating $@"
	$(_V) mkdir -p $(INSTALL_DIR)
	
release-install:
	$(_E) "Target is obsolete. Use 'install' instead."
release-source:
	$(_E) "Target is obsolete. Use 'bundle_src' instead."
release_zip:
	$(_E) "Target is obsolete. Use 'bundle_zip' instead."

remake: clean all
